# -*- coding: utf-8 -*-
"""
test_build_chain
================
Test FSIC build chain from specification through to class generation.

The specification in `test_build_chain()` is of Model *SIM* from:

Godley, W., Lavoie, M. (2007),
*Monetary economics: An integrated approach to
credit, money, income, production and wealth*,
Palgrave Macmillan

"""

from FSIC.parser.wrappers import read_python
from FSIC.build.model import build_model


XP = '''\
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SIM
===
FSIC model class generated by `FSIC.build_model()`.

"""

import FSIC


class SIM(FSIC.Model):
    """FSIC model class.

    """

    VARIABLES = ['C_d', 'C_s', 'G_s', 'T_d', 'T_s', 'N_d', 'N_s', 'YD', 'H_h', 'H_s', 'Y', 'G_d']
    PARAMETERS = ['W', 'theta', 'alpha_1', 'alpha_2']
    ERRORS = []

    CONVERGENCE_VARIABLES = ['C_d', 'C_s', 'G_s', 'T_d', 'T_s', 'N_d', 'N_s', 'YD', 'H_h', 'H_s', 'Y']

    START_OFFSET = 1
    END_OFFSET = 0

    VERSION = '0.1.0.dev'


    def _solve_python_iteration(self, row):
        self.G_s.values[row] = self.G_d.values[row]
        self.C_d.values[row] = self.alpha_1.values[row] * self.YD.values[row] + self.alpha_2.values[row] * self.H_h.values[row-1]
        self.C_s.values[row] = self.C_d.values[row]
        self.Y.values[row] = self.C_s.values[row] + self.G_s.values[row]
        self.N_d.values[row] = self.Y.values[row] / self.W.values[row]
        self.N_s.values[row] = self.N_d.values[row]
        self.YD.values[row] = self.W.values[row] * self.N_s.values[row] - self.T_s.values[row]
        self.T_d.values[row] = self.theta.values[row] * self.W.values[row] * self.N_s.values[row]
        self.T_s.values[row] = self.T_d.values[row]
        self.H_h.values[row] = self.H_h.values[row-1] + self.YD.values[row] - self.C_d.values[row]
        self.H_s.values[row] = self.H_s.values[row-1] + self.G_d.values[row] - self.T_d.values[row]
'''

def test_build_chain():
    specification = '''\
C_s = C_d
G_s = G_d
T_s = T_d
N_s = N_d
YD = {W} * N_s - T_s
T_d = {theta} * {W} * N_s
C_d = {alpha_1} * YD + {alpha_2} * H_h[-1]
H_s = H_s[-1] + G_d - T_d
H_h = H_h[-1] + YD - C_d
Y = C_s + G_s
N_d = Y / {W}
'''
    script = build_model(read_python(specification),
                         output='script',
                         name='SIM')
    assert script == XP


if __name__ == '__main__':
    nose.runmodule()
